<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>joDoc</title>
<meta name="generator" content="joDoc">
<link rel="stylesheet" type="text/css" href="docbody.css">
<link rel="stylesheet" type="text/css" href="doc.css">
<meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, user-scalable=no, width=device-width">
<meta name="format-detection" content="false">
</head>
<body>
<h1><a name="Base">Base</a></h1>

<p>Includes functionality used to manipulate the xui object collection; things like iteration and set operations are included here.</p>

<h2>extend</h2>

<p>Allows extension of xui's prototype with the members/methods of the provided object.</p>

<h3>syntax</h3>

<pre><code>xui.extend( object );
</code></pre>

<p>Call extend on the xui object to extend all xui instances with functionality and/or members of the passed-in object.</p>

<h3>arguments</h3>

<ul>
<li>object:object a JavaScript object whose members will be incorporated into xui's prototype</li>
</ul>

<h3>example</h3>

<p>Given:</p>

<pre><code>var thing = {
    first : function() { return this[ 0 ]; },
    last : function() { return this[ this.length - 1 ]; }
}
</code></pre>

<p>We can extend xui's prototype with these methods by using <code>extend</code>:</p>

<pre><code>xui.extend( thing );
</code></pre>

<p>Now we can use <code>first</code> and <code>last</code> in all instances of xui:</p>

<pre><code>var f = x$( '.someClass' ).first();
var l = x$( '.differentClass' ).last();
</code></pre>

<h2>find</h2>

<p>Finds matching elements based on a query string. The global xui entry <code>x$</code> function is a reference to the <code>find</code> function.</p>

<h3>syntax</h3>

<pre><code>x$(window).find( selector [, context] );
</code></pre>

<h3>arguments</h3>

<ul>
<li>selector:string a CSS selector string to match elements to.</li>
<li>context:HTMLElement an html element to use as the "root" element to search from.</li>
</ul>

<h3>example</h3>

<p>Given the following markup:</p>

<pre><code>&lt;ul id="first"&gt;
    &lt;li id="one"&gt;1&lt;/li&gt;
    &lt;li id="two"&gt;2&lt;/li&gt;
&lt;/ul&gt;
&lt;ul id="second"&gt;
    &lt;li id="three"&gt;3&lt;/li&gt;
    &lt;li id="four"&gt;4&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>We can select only specific list items by using <code>find</code>, as opposed to selecting off the document root:</p>

<pre><code>x$('li'); // returns all four list item elements.
x$('#second').find('li'); // returns list items "three" and "four"
</code></pre>

<h2>set</h2>

<p>Sets the objects in the xui collection.</p>

<h3>syntax</h3>

<pre><code>x$(window).set( array );
</code></pre>

<h2>reduce</h2>

<p>Reduces the set of elements in the xui object to a unique set.</p>

<h3>syntax</h3>

<pre><code>x$(someSelector).reduce( [ elements [, toIndex ]] );
</code></pre>

<p>The elements parameter is optional - if not specified, will reduce the elements in the current xui object.</p>

<h3>arguments</h3>

<ul>
<li>elements:Array an array of elements to reduce (optional)</li>
<li>toIndex:Number last index of elements to include in the reducing operation.</li>
</ul>

<h2>has</h2>

<p>Has modifies the elements array and returns all the elements that match (has) a CSS selector.</p>

<h3>syntax</h3>

<pre><code>x$(someSelector).has( query );
</code></pre>

<p>Behind the scenes, actually calls the filter method.</p>

<h3>arguments</h3>

<ul>
<li>query:string a CSS selector that will match all children of originally-selected xui collection</li>
</ul>

<h3>example</h3>

<p>Given</p>

<pre><code>&lt;div&gt;
    &lt;div class="gotit"&gt;these ones&lt;/div&gt;
    &lt;div class="gotit"&gt;have an extra class&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>We can use xui like so</p>

<pre><code>var divs = x$('div'); // we've got all four divs from above.
var someDivs = divs.has('.gotit'); // we've now got only the two divs with the class
</code></pre>

<h2>filter</h2>

<p>Both an internal utility function, but also allows developers to extend xui using custom filters</p>

<h3>syntax</h3>

<pre><code>x$(someSelector).filter( functionHandle );
</code></pre>

<p>The <code>functionHandle</code> function will get invoked with <code>this</code> being the element being iterated on,
and the index passed in as a parameter.</p>

<h3>arguments</h3>

<ul>
<li>functionHandle:Function a function reference that evaluates to true/false, determining which elements get included in the xui collection.</li>
</ul>

<h3>example</h3>

<p>Perhaps we'd want to filter input elements that are disabled:</p>

<pre><code>x$('input').filter(function(i) {
    return this.checked;
});
</code></pre>

<h2>not</h2>

<p>Not modifies the elements array and returns all the elements that DO NOT match a CSS Query - the opposite of has</p>

<h3>syntax</h3>

<pre><code>x$(someSelector).not( someOtherSelector );
</code></pre>

<h3>arguments</h3>

<ul>
<li>someOtherSelector:string a CSS selector that elements should NOT match to.</li>
</ul>

<h3>example</h3>

<p>Given</p>

<pre><code>&lt;div&gt;
    &lt;div class="gotit"&gt;these ones&lt;/div&gt;
    &lt;div class="gotit"&gt;have an extra class&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>We can use xui like so</p>

<pre><code>var divs = x$('div'); // we've got all four divs from above.
var someDivs = divs.not('.gotit'); // we've now got only the two divs _without_ the class "gotit"
</code></pre>

<h2>each</h2>

<p>Element iterator (over the xui collection).</p>

<h3>syntax</h3>

<pre><code>x$(window).each( functionHandle )
</code></pre>

<h3>arguments</h3>

<ul>
<li>functionHandle:Function callback function that will execute with each element being passed in as the <code>this</code> object and first parameter to callback</li>
</ul>

<h3>example</h3>

<pre><code>x$(someSelector).each(function(element, index, xui) {
    alert("Here's the " + index + " element: "+ element);
});
</code></pre>

</body>
</html>

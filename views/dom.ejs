<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>joDoc</title>
<meta name="generator" content="joDoc">
<link rel="stylesheet" type="text/css" href="docbody.css">
<link rel="stylesheet" type="text/css" href="doc.css">
<meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, user-scalable=no, width=device-width">
<meta name="format-detection" content="false">
</head>
<body>
<h1><a name="DOM">DOM</a></h1>

<p>Set of methods used for manipulating the Document Object Model (<a href="js_dom.js.html#DOM">DOM</a>).</p>

<h2>html</h2>

<p>For manipulating HTML in the <a href="js_dom.js.html#DOM">DOM</a>.</p>

<h3>syntax</h3>

<pre><code>x$(window).html( location, html );
</code></pre>

<p>or this method will accept just an html fragment with a default behavior of inner.</p>

<pre><code>x$(window).html( html );
</code></pre>

<p>or you can use shorthand syntax by using the location name argument (see below) as the function name.</p>

<pre><code>x$(window).outer( html );
x$(window).before( html );
</code></pre>

<h3>arguments</h3>

<ul>
<li>location:string can be one of: inner, outer, top, bottom, remove, before or after.</li>
<li>html:string any string of html markup or an HTMLElement.</li>
</ul>

<h3>example</h3>

<pre><code>x$('#foo').html( 'inner', '&lt;strong&gt;rock and roll&lt;/strong&gt;' );
x$('#foo').html( 'outer', '&lt;p&gt;lock and load&lt;/p&gt;' );
x$('#foo').html( 'top', '&lt;div&gt;bangers and mash&lt;/div&gt;');
x$('#foo').html( 'bottom','&lt;em&gt;mean and clean&lt;/em&gt;');
x$('#foo').html( 'remove'); 
x$('#foo').html( 'before', '&lt;p&gt;some warmup html&lt;/p&gt;');
x$('#foo').html( 'after', '&lt;p&gt;more html!&lt;/p&gt;');
</code></pre>

<p>or</p>

<pre><code>x$('#foo').html( '&lt;p&gt;sweet as honey&lt;/p&gt;' );
x$('#foo').outer( '&lt;p&gt;free as a bird&lt;/p&gt;' );
x$('#foo').top( '&lt;b&gt;top of the pops&lt;/b&gt;' );
x$('#foo').bottom( '&lt;span&gt;bottom of the barrel&lt;/span&gt;' );
x$('#foo').before( '&lt;pre&gt;first in line&lt;/pre&gt;' );
x$('#foo').after( '&lt;marquee&gt;better late than never&lt;/marquee&gt;' );
</code></pre>

<h2>attr</h2>

<p>For getting or setting attributes on elements.</p>

<h3>syntax (and examples)</h3>

<pre><code>x$(window).attr( attribute, value );
</code></pre>

<p>To retrieve an attribute value, simply don't provide the optional second parameter:</p>

<pre><code>x$('.someClass').attr( 'class' );
</code></pre>

<p>To set an attribute, use both parameters:</p>

<pre><code>x$('.someClass').attr( 'disabled', 'disabled' );
</code></pre>

<h3>arguments</h3>

<ul>
<li>attribute:string the name of the element's attribute to set or retrieve.</li>
<li>html:string if retrieving an attribute value, don't specify this parameter. Otherwise, this is the value to set the attribute to.</li>
</ul>

</body>
</html>
